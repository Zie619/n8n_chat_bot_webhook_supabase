#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config({ path: '.env.local' });

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

const log = {
  error: (msg) => console.log(`${colors.red}✗ ${msg}${colors.reset}`),
  success: (msg) => console.log(`${colors.green}✓ ${msg}${colors.reset}`),
  info: (msg) => console.log(`${colors.blue}→ ${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}⚠ ${msg}${colors.reset}`),
  highlight: (msg) => console.log(`${colors.cyan}${msg}${colors.reset}`),
};

console.log(`${colors.green}=== Supabase Database Setup ===${colors.reset}\n`);

// Check environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  log.error('Missing required environment variables!');
  console.log('Please ensure the following are set in .env.local:');
  console.log('  - NEXT_PUBLIC_SUPABASE_URL');
  console.log('  - NEXT_PUBLIC_SUPABASE_ANON_KEY');
  process.exit(1);
}

// Check if using default/placeholder values
if (supabaseUrl.includes('your-supabase-project-url') || supabaseUrl.includes('your-project')) {
  log.error('Please update NEXT_PUBLIC_SUPABASE_URL with your actual Supabase URL');
  console.log('It should look like: https://abcdefghijk.supabase.co');
  process.exit(1);
}

log.info(`Supabase URL: ${supabaseUrl}\n`);

// Create Supabase client - use service role key if available, otherwise anon key
const supabaseKey = serviceRoleKey && serviceRoleKey !== 'your-service-role-key-here' ? serviceRoleKey : supabaseAnonKey;
const isServiceRole = serviceRoleKey && serviceRoleKey !== 'your-service-role-key-here';

if (!isServiceRole) {
  log.warning('Service role key not found - using anon key');
  log.warning('Some operations may be limited\n');
}

const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Function to test if tables exist
async function checkTableExists(tableName) {
  try {
    const { count, error } = await supabase
      .from(tableName)
      .select('*', { count: 'exact', head: true });
    
    if (error && error.code === '42P01') {
      return false; // Table doesn't exist
    }
    
    return !error;
  } catch (err) {
    return false;
  }
}

// Function to generate combined SQL script
async function generateCombinedSQL() {
  const migrationsDir = path.join(__dirname, '..', 'supabase', 'migrations');
  
  try {
    const files = await fs.readdir(migrationsDir);
    const sqlFiles = files.filter(f => f.endsWith('.sql')).sort();
    
    if (sqlFiles.length === 0) {
      log.error('No SQL migration files found!');
      return null;
    }
    
    log.info(`Found ${sqlFiles.length} migration files`);
    
    const combinedSQL = [];
    combinedSQL.push('-- Combined Supabase Migrations');
    combinedSQL.push('-- Generated by setup script');
    combinedSQL.push('-- Run this in your Supabase SQL Editor\n');
    
    for (const file of sqlFiles) {
      const sql = await fs.readFile(path.join(migrationsDir, file), 'utf8');
      combinedSQL.push(`-- ========================================`);
      combinedSQL.push(`-- Migration: ${file}`);
      combinedSQL.push(`-- ========================================`);
      combinedSQL.push(sql);
      combinedSQL.push('');
    }
    
    const outputPath = path.join(__dirname, 'combined-migrations.sql');
    await fs.writeFile(outputPath, combinedSQL.join('\n'));
    
    return outputPath;
  } catch (error) {
    log.error(`Failed to generate SQL: ${error.message}`);
    return null;
  }
}

// Main setup function
async function setupDatabase() {
  // Test connection
  log.info('Testing Supabase connection...');
  
  try {
    // Try a simple query - just check if we can access the table
    const { data, error } = await supabase.from('users').select('*', { count: 'exact', head: true });
    
    if (error && error.code === '42P01') {
      log.warning('Users table does not exist yet');
    } else if (error) {
      throw error;
    } else {
      log.success('Successfully connected to Supabase');
    }
  } catch (error) {
    log.error('Failed to connect to Supabase');
    console.error('Error:', error.message);
    
    if (error.message.includes('Invalid API key')) {
      console.log('\nPlease check your API keys in .env.local');
    }
    
    return;
  }
  
  console.log('');
  
  // Check which tables exist
  console.log(`${colors.yellow}Checking existing tables...${colors.reset}\n`);
  
  const tables = ['users', 'articles', 'workers'];
  const existingTables = [];
  const missingTables = [];
  
  for (const table of tables) {
    const exists = await checkTableExists(table);
    if (exists) {
      log.success(`Table '${table}' exists`);
      existingTables.push(table);
    } else {
      log.error(`Table '${table}' not found`);
      missingTables.push(table);
    }
  }
  
  console.log('');
  
  // Generate combined SQL if tables are missing
  if (missingTables.length > 0) {
    const sqlPath = await generateCombinedSQL();
    
    if (!sqlPath) {
      return;
    }
    
    console.log(`${colors.yellow}=== Manual Setup Required ===${colors.reset}\n`);
    console.log('The following tables need to be created:');
    missingTables.forEach(table => console.log(`  - ${table}`));
    
    console.log('\n' + colors.cyan + 'To complete the setup:' + colors.reset + '\n');
    console.log('1. Go to your Supabase project dashboard:');
    console.log(`   ${colors.blue}${supabaseUrl.replace('.supabase.co', '.supabase.com/project')}${colors.reset}`);
    console.log('\n2. Navigate to the SQL Editor (in the left sidebar)');
    console.log('\n3. Create a new query and paste the contents of:');
    console.log(`   ${colors.green}${sqlPath}${colors.reset}`);
    console.log('\n4. Click "Run" to execute all migrations');
    
    console.log('\n' + colors.yellow + 'Alternative method:' + colors.reset);
    console.log('You can also run each migration file individually in the Supabase SQL Editor:');
    console.log(`  ${colors.blue}supabase/migrations/${colors.reset}`);
    
    // If service role key is missing, provide instructions
    if (!isServiceRole) {
      console.log('\n' + colors.cyan + 'To enable automatic setup in the future:' + colors.reset);
      console.log('1. Get your service role key from:');
      console.log(`   ${supabaseUrl.replace('.supabase.co', '.supabase.com/project')}/settings/api`);
      console.log('2. Add it to .env.local:');
      console.log('   SUPABASE_SERVICE_ROLE_KEY=your-actual-service-role-key');
    }
  } else {
    log.success('All required tables exist!');
    
    // Show table information
    console.log('\n' + colors.cyan + 'Database Status:' + colors.reset);
    for (const table of existingTables) {
      try {
        const { count } = await supabase
          .from(table)
          .select('*', { count: 'exact', head: true });
        console.log(`  - ${table}: ready`);
      } catch (err) {
        console.log(`  - ${table}: ready`);
      }
    }
    
    console.log('\n' + colors.green + 'Your database is ready to use!' + colors.reset);
    console.log('\nYou can now:');
    console.log('  1. Register new users at http://localhost:3000/login');
    console.log('  2. Create and manage articles');
    console.log('  3. Track user activity');
  }
}

// Run the setup
setupDatabase().catch(console.error);